{% extends 'layout.twig' %}

{% block body %}

    <div class="intro">
    <h1>Drum loops generator Project</h1>
    <a href="https://github.com/ValentinBilot/DrumLoopsGenerator"> (Github link) </a>
    </br>
    </div>
    <div class="main">

    <h2>Intro</h2>

    <p>Some parts of this project are a bit technical, some knowledge about
    neural networks, Convolutional Neural Networks (CNNs),
    Recurent Neural Networks (RNNs), and Variational Auto-Encoders
    <a href="https://towardsdatascience.com/intuitively-understanding-variational-autoencoders-1bfe67eb5daf">
      (VAEs)</a>
    can be very usefull.</p>

    <p>This project firstly was done in order to create one
       Variational Auto Encoder able to encode and generate drum sounds
       like snares, bass drums, hit hats, tambourines... and to generate
       sounds between distinct elements, like something between a snare and
       a bass drum. Which we could imagine sounds like a
       "big bass snare drum". But it evolved into generating drum loops, because
       the encoded information was then fun and easy to use with RNNs.
     </p>

    <h2>Global schema of the first Variational Auto-Encoder:</h2>
    <img class="schema" src="images/drum_loops_global_sheme.png">

    <h2>Architectures of the Encoder and Decoder networks</h2>

    <h3>Encoder</h3>
    <p>As the spectrogram of a sound is an image, and as there is a lot of
    bibliography about using convolutional neural networks (CNNs) on images,
    I used this technique to reduce the dimension of the image.
    Once the dimension reduced, I passed the smaller images into linear layers.
    The output is made of two 3-dimensional points, one for the mean, and the
    other for the standard deviation. From those two points we sample from a
    normal distribution with the means and standard deviation previously obtained.
    And then we have our encoded spectrogram in a 3-dimensional space.
    </p>

    <h3>Decoder</h3>
    <p>The architecture of the decoder is very similar to the encoder.
    First the 3d point goes throught linear layers in order to increase
    the dimension, then the vector is split in small images, that will
    flow in 2d CNNs, with layers of interpolation in order to increase the dimension
    again, and to finaly reach the exact size of the input spectrogram of the Encoder.
    </p>

    <h3>Training</h3>
    <p>The loss function is obtained by summing the mean square error between
    the input and output spectrograms, and the KL-divergence between the distributions
    of probability used to build the latent space and the standard normal distribution.
    Optimisation of the parameters was done with ADAM.</p>

    <h2>Sequences of 3d points</h2>

    <p>The intersting thing now, is that we have a way to reduce a drum
    sound, which is something a bit complicated, into a single 3d point,
    which is much simpler.
    Thus, building a network able to understand the structure of
    a sequence of 3d points was the idea that followed logically.</p>
    <p>In order to create sequences of 3d points, we used drum loops
    of length 4 bars, in 4/4, which represents 64 sixteenth notes. We
    count in sixteenth notes because it is the most common way to structure
    rythms in traditional european music. All the loops used were recorded
    at 120 bpm.</p>
    <p>Thus, as we associate each stroke to one sixteenth note, the loops
    we will study are sequences of 64 points in 3 dimensions.</p>

    <h2>Usual structure of a drum loop</h2>

    <p>There is a structure that is generally implicit inside a drum loop.
    Usually, the first and third bars are very similar, the end of the second
    bar is a small break and the end of the forth bar is a bigger break.</p>
    <p>I tried to take advantage of this structure by building a hierarchical
    neural network, that can understand the loop on different levels:</p>
    <ul>
      <li>Loop level</li>
      <li>Bar level</li>
      <li>Quarter note level</li>
      <li>Sixteenth note level</li>
    </ul>
    <p>I think that the best way to understand the network structure is to
    read <a href="https://github.com/ValentinBilot/DrumLoopsGenerator">the code</a>.
    Still I will try to explain it here.</p>




    </div>

{% endblock %}
